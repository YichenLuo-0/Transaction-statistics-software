package browseInformation;import static browseInformation.BrowserData.dataInformation;final class Sort {    protected static void sortWithData(int needSort) {        int sortNum = switch (needSort) {            case 1 -> 2;            case 2 -> 3;            case 3 -> 8;            case 4 -> 9;            case 5 -> 14;            case 6 -> 15;            default -> 0;        };        if (sortNum == 0) {            quickSort(0, BrowserData.dealNumber - 1);        } else {            quickSort(0, BrowserData.dealNumber - 1, sortNum);        }    }    private static void quickSort(int start, int end) {        int i = start, j = end, k = i;        big:        while (true) {            while (true) {                if (i == j) {                    break big;                } else if (data(k, j)) {                    change(k, j);                    k = j;                    break;                } else j--;            }            while (true) {                if (i == j) {                    break big;                } else if (data(i, k)) {                    change(i, k);                    k = i;                    break;                } else i++;            }        }        if (i > start) {            quickSort(start, i);        }        if (i + 1 < end) {            quickSort(i + 1, end);        }    }    private static void quickSort(int start, int end, int sortNum) {        int i = start, j = end, k = i;        big:        while (true) {            while (true) {                if (i == j) {                    break big;                } else if (integer(k, j, sortNum)) {                    change(k, j);                    k = j;                    break;                } else j--;            }            while (true) {                if (i == j) {                    break big;                } else if (integer(i, k, sortNum)) {                    change(i, k);                    k = i;                    break;                } else i++;            }        }        if (i > start) {            quickSort(start, i, sortNum);        }        if (i + 1 < end) {            quickSort(i + 1, end, sortNum);        }    }    private static void change(int i, int j) {        String[] tem = dataInformation[i];        dataInformation[i] = dataInformation[j];        dataInformation[j] = tem;    }    private static boolean integer(int i, int j, int sortNum) {        if (dataInformation[i][sortNum] == null || dataInformation[j][sortNum] == null) {            return dataInformation[j][sortNum] != null;        } else if (dataInformation[i][sortNum].equals("-") || dataInformation[j][sortNum].equals("-")) {            return !dataInformation[j][sortNum].equals("-");        } else {            if (Float.parseFloat(dataInformation[i][sortNum]) > Float.parseFloat(dataInformation[j][sortNum])) {                return BrowserData.ascend;            } else if (Float.parseFloat(dataInformation[i][sortNum]) < Float.parseFloat(dataInformation[j][sortNum])) {                return !BrowserData.ascend;            } else {                return false;            }        }    }    private static boolean data(int i, int j) {        if (dataInformation[i][4] == null || dataInformation[j][4] == null) {            return false;        }        String[] dataA = {dataInformation[i][4], dataInformation[i][5], dataInformation[i][6]};        String[] dataB = {dataInformation[j][4], dataInformation[j][5], dataInformation[j][6]};        if (Integer.parseInt(dataA[0]) > Integer.parseInt(dataB[0])) {            return BrowserData.ascend;        } else if (Integer.parseInt(dataA[0]) < Integer.parseInt(dataB[0])) {            return !BrowserData.ascend;        } else if (Integer.parseInt(dataA[1]) > Integer.parseInt(dataB[1])) {            return BrowserData.ascend;        } else if (Integer.parseInt(dataA[1]) < Integer.parseInt(dataB[1])) {            return !BrowserData.ascend;        } else if (Integer.parseInt(dataA[2]) > Integer.parseInt(dataB[2])) {            return BrowserData.ascend;        } else if (Integer.parseInt(dataA[2]) < Integer.parseInt(dataB[2])) {            return !BrowserData.ascend;        } else {            return false;        }    }}